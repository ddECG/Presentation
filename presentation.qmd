---
title: "Transfer Learning"
author: "Thor Larsen & Anders Askeland"
format:
  revealjs:
    slide-number: true
    theme: simple
    controls : true
    transition: slide
    logo: images/logo.png
    background-transition: fade
    preview-links: auto

output: 
  revealjs::revealjs_presentation:
title-slide-attributes:
  data-background-image: background_2.png
  data-background-size: cover
---
## Datasets
```{css}
.scrollable::-webkit-scrollbar {
  display: none;
}
```
PTB-XL

![](images/ptb-xl.png) Code-15%![](images/code-15.png)

## Residual neural network

# Results from training and prediction

Difference in accuracy between:

-   Fine-tuned model (<em>Lima </em>)

-   Original model

-   New model

## Training results {.smaller .scrollable transition="slide"}
::: {.panel-tabset}
### Plot
```{r}
library(magrittr)
df <- readRDS("data/df_history.rds")

train_combined <- df %>%
    ggplot2::ggplot(ggplot2::aes(x = epoch, y = valid_error, color = dataset)) +
    ggplot2::geom_line(size = .6) +
    ggplot2::geom_segment(ggplot2::aes(xend=max(epoch), 
                                       yend = valid_error),
                                       linetype = 2) +
    ggplot2::geom_text(ggplot2::aes(x = max(epoch) + .1, 
                                    label = sprintf("%5.0f", valid_error)),
                       hjust = 0) +
    ggplot2::labs(title = "Training accuracy on PTB-XL dataset. Epoch: {round(frame_along, 0)}",
                  y = 'Accuracy (Error percentage)', 
                  x = 'Epoch') +
    ggplot2::theme_bw() +
    ggplot2::expand_limits(x = c(0, 70)) +
    ggplot2::theme(panel.border = ggplot2::element_blank(),
                       axis.line = ggplot2::element_line(colour = "black")) +
    gganimate::transition_reveal(epoch) +
    gganimate::view_follow(fixed_y = T) +
    ggplot2::theme(text = ggplot2::element_text(color = "#22211d"),
                   plot.title = ggplot2::element_text(size=20),
                   plot.subtitle = ggplot2::element_text(size=15, 
                                                         color = "#4e4d47"))

gganimate::animate(train_combined, duration = 30, start_pause = 10, end_pause = 60)
```

### Data
```{r}
knitr::kable(df)


```
:::
## Prediction results {.smaller .scrollable transition="slide"}
::: {.panel-tabset}
### Plot
```{r}
library(magrittr)
df <- readRDS("data/df_predictions.rds")
df %>%
    ggplot2::ggplot(ggplot2::aes(x = dataset, y = error)) +
    ggplot2::geom_boxplot() +
    ggplot2::ylab("Accuracy (Error percentage)") +
    ggplot2::xlab("Model")
```

### Data
```{r}
knitr::kable(df)
```
::: 
### Model's architecture 

<<<<<<< HEAD
Predict age from ECG - Application
=======
TODO: Insert image/lima_deep_2021.png and image/he_deep_2015.png image side by side

* By using a residual neural network we get a well performing model 
* Convolution to create a feature map
* Batch normalization and ReLUs to decrease computational complexity
* Dropout of learned features (activations) in layers to decrease overfitting 
* Skip connection with max pooling to add most prominent residuals from features
* Linear layer in the end to map to prediction
* ADAM optimizer

### Transfer learning

TODO: Insert image/ribeiro_automatic_2020.png

* Re-use same neural network architecture and what the former models learned
* Continue training to fine tune and optimize weights
* Recap: Developed and improved this on age prediction using author's model and weights
* In dev: exchange linear layer with dense layer and sigmoid
* In dev: predict cardio vascular complications using same neural network and what it learned
* In dev: use on third dataset with ECGs for patients with diabetes complications

### Application and use case

Application - Predict age from ECG with residual neural network (500hz ECGs from Code-15% finetuned on PTB-XL)

Application in development - Use same model and transfer learning to predict cardiovascular complications related to diabetes

### Find the code, experiment, contribute!
>>>>>>> 0a1ef1ade1c9847e15dea604c2997aca414d9949

Source code - [Github](https://github.com/ddECG)

